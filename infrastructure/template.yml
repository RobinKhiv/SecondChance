AWSTemplateFormatVersion: '2010-09-09'
Description: 'SecondChance Application Infrastructure - Simplified'

Parameters:
  Stage:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - dev
  
  SupabaseURL:
    Type: String
    Description: 'Your Supabase project URL'
  
  SupabaseAnonKey:
    Type: String
    Description: 'Your Supabase anon key'
    NoEcho: true

Resources:
  # SSL Certificate
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.secondchance.robinkhiv.com
      ValidationMethod: DNS

  # CloudFront Distribution for API
  ApiCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: Certificate
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        WebACLId: !GetAtt WebACL.Arn
        Aliases:
          - api.secondchance.robinkhiv.com
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - DomainName: !Sub "${Api}.execute-api.${AWS::Region}.amazonaws.com"
            Id: ApiGateway
            OriginPath: !Sub "/${Stage}"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
        DefaultCacheBehavior:
          TargetOriginId: ApiGateway
          ViewerProtocolPolicy: https-only
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  # WAF Configuration
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${AWS::StackName}-web-acl"
      Description: 'Web ACL for API protection'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: RateLimit
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${AWS::StackName}-web-acl"

  # Lambda Function Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: "Hello from Lambda!" })
            };
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          SUPABASE_URL: !Sub '{{resolve:secretsmanager:${SupabaseSecret}:SecretString:url}}'
          SUPABASE_ANON_KEY: !Sub '{{resolve:secretsmanager:${SupabaseSecret}:SecretString:key}}'
          NODE_ENV: !Ref Stage

  # API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      EndpointConfiguration:
        Types:
          - EDGE

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5001'"

  # Add OPTIONS method
  ApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5001'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
    Properties:
      RestApiId: !Ref Api

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref Stage
      CacheClusterEnabled: false
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 1000
          ThrottlingRateLimit: 2000

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApiFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*

  # Secrets Management
  SupabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/supabase'
      Description: 'Supabase credentials'
      SecretString: !Sub '{"url":"${SupabaseURL}","key":"${SupabaseAnonKey}"}'

Outputs:
  ApiEndpoint:
    Description: API Endpoint
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"

  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value: !GetAtt ApiCloudFrontDistribution.DomainName 